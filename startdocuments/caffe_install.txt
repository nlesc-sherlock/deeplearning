# These are the steps we did to install Caffe (NVIDIA flavour) on DAS-5


Basics
======

- Do this every time you want to build this stuff or run it.

module load cuda70/toolkit
module load cuda70/blas
module load hdf5_18/1.8.12
module load openblas


- Edit these for your own installation paths:
export GITBASE=$HOME/git
export BUILDBASE=$HOME/build
export INSTALLITHERE=$HOME/sw


- Possibly you'll need to setup an SSH key for GitHub on the machine first:
https://help.github.com/articles/generating-ssh-keys/


Dependencies
============

boost
-----
- Roughly following http://wiki.tiker.net/BoostInstallationHowto:

cd $BUILDBASE
wget http://downloads.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.bz2
mv boost_1_59_0.tar.bz2\?r\=http\:%2F%2Fsourceforge.net%2Fprojects%2Fboost%2Ffiles%2Fboost%2F1.59.0%2F boost_1_59_0.tar.bz2
tar xjf boost_1_59_0.tar.bz2
cd boost_1_59_0
./bootstrap.sh --prefix=$INSTALLITHERE --libdir=$INSTALLITHERE/lib
./b2 -j 16
./b2 install


protobuf
--------
cd $GITBASE
git clone git@github.com:google/protobuf.git
cd protobuf/
./autogen.sh
./configure --prefix=$INSTALLITHERE
make -j16
make check
make install


glog
----
cd $GITBASE
git clone git@github.com:google/glog.git
cd glog
git checkout tags/v0.3.4
touch configure.ac aclocal.m4 configure Makefile.am Makefile.in
./configure --prefix=$INSTALLITHERE
make
make install


cmake
-----
- The version on DAS5 was too low for gflags (25 Nov 2015).

cd $BUILDBASE
wget https://cmake.org/files/v3.4/cmake-3.4.0.tar.gz
tar xzf cmake-3.4.0.tar.gz 
cd cmake-3.4.0
cmake . -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLITHERE
make -j16
make install


- Put in your ~/.profile or ~/.bash_profile:
  export PATH=$INSTALLITHERE/bin:$PATH
- Resource it for the current session:
. ~/.bash_profile


gflags
------
cd $GITBASE
git clone git@github.com:gflags/gflags.git
cd gflags
mkdir build && cd build
CXXFLAGS="-fPIC" cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLITHERE
make
make install


Non-optional optional packages
==============================
The installation guide mentions a few packages as optional. This may be true
for the official Berkeley version (we didn't try that), but it certainly is not
for the NVIDIA version. The flags to turn off the optional dependencies are
missing in Makefile.config, so they can't be turned off the regular way. So,
let's just build them too.


opencv2
-------
cd $BUILDBASE
wget https://github.com/Itseez/opencv/archive/2.4.11.zip
mv 2.4.11.zip opencv_2.4.11.zip
unzip opencv_2.4.11.zip
cd opencv-2.4.11/
mkdir build
cd build/
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CUDA_GENERATION=Kepler -D CMAKE_INSTALL_PREFIX=$INSTALLITHERE ..
make -j16
make install


snappy
------
cd $GITBASE
git clone git@github.com:google/snappy.git
cd snappy/
./autogen.sh
./configure --prefix=$INSTALLITHERE
make -j16
make install


leveldb
-------
cd $GITBASE
git clone git@github.com:google/leveldb.git
cd leveldb
make -j16
cp libleveldb.* $INSTALLITHERE/lib
cp -r include/leveldb $INSTALLITHERE/include


lmdb
----
cd $GITBASE
git clone git@github.com:LMDB/lmdb.git
cd lmdb/libraries/liblmdb
make -j16
cp liblmdb.* $INSTALLITHERE/lib
cp lmdb.h $INSTALLITHERE/include


Actually optional
=================

cuDNN
-----
- For this you need to register for NVIDIA's developer/researcher program.
  Register here: https://developer.nvidia.com/cudnn, wait a day or two and
  download it from their webpage. Copy the file to DAS from your machine:

scp cudnn-7.0-linux-x64-v3.0-prod.tgz das5vu:./build/


- and install:

cd $BUILDBASE
tar xzf cudnn-7.0-linux-x64-v3.0-prod.tgz
ln -s $BUILDBASE/cuda/lib64/* $INSTALLITHERE/lib/
ln -s $BUILDBASE/cuda/include/* $INSTALLITHERE/include/

- Note that this installs the files as links, so keep the build dir there!


Caffe-nv
========

- We're using the NVIDIA version of Caffe, since we need that for DIGITS.

cd $GITBASE
git clone git@github.com:NVIDIA/caffe.git
mv caffe caffe_nv
cd caffe_nv

- Build:

mkdir buildcmake
cd buildcmake
cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLITHERE

ccmake ..

- There we set BLAS to Open (Enter Enter). Press c.
- You should get an error saying it can't find openblas. Press e.
- Then fill in the openblas paths from `module show openblas`:
BLAS_INCLUDE := /cm/shared/apps/openblas/0.2.8/include/openblas
BLAS_LIB := /cm/shared/apps/openblas/0.2.8/lib/libopenblas.so
- Then press c again twice. Press g to generate and exit.

make all -j16

- It might happen that you get errors like:

... compilation terminated.
The bug is not reproducible, so it is likely a hardware or OS problem.

  This is a race condition thing; apparently the caffe Makefile isn't robust
  enough to do multiple jobs (-j16). Just run again and it'll likely be
  fixed.
